package com.shopgp.admin.user;

import java.util.List;
import java.util.NoSuchElementException;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.shopgp.common.entity.Role;
import com.shopgp.common.entity.User;

@Service
@Transactional
public class UserService {
	public static final int USERS_PER_PAGE = 4;
	
	@Autowired
	private UserRepository userRepo;
	
	@Autowired
	private RoleRepository roleRepo;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	public List<User> listAll() {
		return (List<User>) userRepo.findAll();
	}
	
	public Page<User> listByPage(int pageNumber,String sortField,String sortDir) {
		Pageable pageable = null;
		System.out.println(sortField);
		System.out.println(sortDir);
		if(sortField == null || sortDir == null) {
			System.out.println("ahihi");
			pageable = PageRequest.of(pageNumber-1,USERS_PER_PAGE);
		}
		else if(sortDir.equals("asc")) {
		pageable = PageRequest.of(pageNumber-1,USERS_PER_PAGE,Sort.by(sortField));
		} 
		else if(sortDir.equals("desc")) {
		pageable = PageRequest.of(pageNumber-1,USERS_PER_PAGE,Sort.by(sortField).descending());	
		}
		return userRepo.findAll(pageable);
	}

	public List<Role> listRole() {
		return (List<Role>) roleRepo.findAll();
	}

	public void saveUser(User user) {
		boolean isUpdatingUser = (user.getId() != null);
		if(isUpdatingUser) {
			if(user.getPassword().isEmpty()) {
			User existingUser = userRepo.findById(user.getId()).get();
			user.setPassword(existingUser.getPassword());
			} else {
				encodePassword(user);
			}
		}else {
		encodePassword(user);
		}
		userRepo.save(user);
	}
	
	private void encodePassword(User user) {
		String encodedPassword = passwordEncoder.encode(user.getPassword());
		user.setPassword(encodedPassword);
	}
	
	public boolean isEmailUnique(Integer id,String email) {
		User userByEmail = userRepo.getUserByEmail(email);
		if (userByEmail == null) return true;
		boolean isCreatingNew = (id == null);
		if(!isCreatingNew && userByEmail.getId() == id) return true;
		return false;
	}

	public User get(Integer id) throws NotFoundUserExeption {
		try {
			return userRepo.findById(id).get();
		} catch (NoSuchElementException ex) {
			throw new NotFoundUserExeption("Could not find user with ID: "+id);
		}
	}
	
	public void delete(Integer id) throws NotFoundUserExeption {
		Long countById = userRepo.countById(id);
		if(countById == null || countById == 0) {
			throw new NotFoundUserExeption("Could not find user with ID: "+id);
		}
		userRepo.deleteById(id);
	}
	
	public void updateUserEnabledStatus(Integer id, boolean enabled) {
		userRepo.updateEnabledStatus(id, enabled);
	}
	
	
}
